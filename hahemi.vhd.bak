library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity datapath is
  port (
    clk, controller_rst, memdataready: in std_logic;
    indatabus: in std_logic_vector(15 downto 0);
    outdatabus: out std_logic_vector(15 downto 0);
    addressbus, instruction0: out std_logic_vector (15 downto 0);
    readmem, writemem, readio, writeio: out std_logic
  );
end datapath;

architecture rtl of datapath is

  component address_logic
    PORT (
    PCside, Rside : IN std_logic_vector (15 DOWNTO 0);
    Iside : IN std_logic_vector (7 DOWNTO 0);
    ALout : OUT std_logic_vector (15 DOWNTO 0);
    ResetPC, PCplusI, PCplus1, RplusI, Rplus0 : IN std_logic
        );
  end component;

  component pc
    port (
    PCin: in std_logic_vector(15 downto 0);
    clk, en: in std_logic;
    PCout: out std_logic_vector(15 downto 0)
    );
  end component;
  
  component IR
    port (
    IRin: in std_logic_vector(15 downto 0);
    IRload, clk: in std_logic;
    IRout: out std_logic_vector(15 downto 0)
    );
  end component;

  component controller
    port(
    instruction: in std_logic_vector(15 downto 0);
    clk, rst, memdataready: in std_logic;
    IRload, readMem, writemem, rstpc, pcplusI, pcplus1, rplusI, rplus0, pcen: out std_logic;
    rdonaddressbus, rfonopndbus, aluondatabus: out std_logic; --on bus signals
    rflwrite, rfhwrite: out std_logic;--register bus
    bout: out std_logic;--alu
    wpadd, wpreset: out std_logic--wp
    ); 
  end component;

  component registerfile
    port (
    clk, rflwrite, rfhwrite: in std_logic;--register file low/high write
    databus: in std_logic_vector(15 downto 0);
    wp: in std_logic_vector(5 downto 0);
    irs, ird: in std_logic_vector(1 downto 0);--input
    rs, rd: out std_logic_vector(15 downto 0)
    );
  end component;

  component wp
    port (
    clk, wpadd, wpreset: in std_logic;
    irin: in std_logic_vector(5 downto 0);
    wpout: out std_logic_vector(5 downto 0)
    );
  end component;
  
  component alu
    port (
    a, b: in std_logic_vector(15 downto 0);
    bout : in std_logic;
    iout: out std_logic_vector(15 downto 0)
    );
  end component;
  
  --signal memdataready: std_logic;
  signal pcside, rside, instruction: std_logic_vector(15 downto 0);
  signal iside: std_logic_vector(7 downto 0);
  signal IRload, rstpc, pcplusI, pcplus1, rplusI, rplus0, pcen: std_logic;
  signal iaddressbus: std_logic_vector(15 downto 0);
signal rdonaddressbus, rfonopndbus, aluondatabus: std_logic;--on bus signals
  signal  rflwrite, rfhwrite: std_logic;--register bus
  signal  bout: std_logic;--alu
  
  signal databus: std_logic_vector(15 downto 0);
  signal rs, rd: std_logic_vector(15 downto 0);
  signal wpout: std_logic_vector(5 downto 0);
  signal wpadd, wpreset : std_logic;
  
  signal a, b: std_logic_vector(15 downto 0);
  signal aluout: std_logic_vector(15 downto 0);
  
begin
--mem: memory port map(clk, readmem, writemem, addressbus, databus, memdataready);
  addressl: address_logic port map(pcside, rside, iside, iaddressbus, rstpc, pcplusI, pcplus1, rplusI, rplus0);
  pc0: pc port map(iaddressbus, clk, pcen, pcside);
  ir0: IR port map(indatabus, IRload, clk, instruction);
  
  cont: controller port map(instruction, clk, controller_rst, memdataready, IRload, readMem, writemem, rstpc, pcplusI, pcplus1, rplusI, rplus0, pcen, rdonaddressbus, rfonopndbus, aluondatabus, rflwrite, rfhwrite, bout, wpadd, wpreset);
  
  reg0: registerfile port map(clk, rflwrite, rfhwrite, databus, wpout, instruction(9 downto 8), instruction(11 downto 10), rs, rd);--wp
  wp0: wp port map(clk, wpadd, wpreset, instruction(5 downto 0), wpout);
  alu0: alu port map(rd, b, bout, aluout);
  
  addressbus<=iaddressbus;
  instruction0<= instruction;
  
  process(rdonaddressbus, aluondatabus, rfonopndbus)
  begin
  
    if(rdonaddressbus = '1') then
      addressbus <= rd;
    else
      addressbus <= (others => 'Z');
    end if;
    
    if(aluondatabus = '1') then
      outdatabus <= aluout;
    else
      outdatabus <= (others => 'Z');
    end if;
    
    if(rfonopndbus = '1') then
      b<= rs;
    else
      null;
    end if;
  end process;
 
end rtl;
